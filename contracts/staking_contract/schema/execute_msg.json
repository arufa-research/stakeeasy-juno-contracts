{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "stake"
      ],
      "properties": {
        "stake": {
          "type": "object",
          "required": [
            "referral"
          ],
          "properties": {
            "referral": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "stake_for_bjuno"
      ],
      "properties": {
        "stake_for_bjuno": {
          "type": "object",
          "required": [
            "referral"
          ],
          "properties": {
            "referral": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "claim"
      ],
      "properties": {
        "claim": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "claim_and_stake"
      ],
      "properties": {
        "claim_and_stake": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_sejuno_addr"
      ],
      "properties": {
        "update_sejuno_addr": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_bjuno_addr"
      ],
      "properties": {
        "update_bjuno_addr": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_validator_set_addr"
      ],
      "properties": {
        "update_validator_set_addr": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_rewards_addr"
      ],
      "properties": {
        "update_rewards_addr": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "advance_window"
      ],
      "properties": {
        "advance_window": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "rebalance_slash"
      ],
      "properties": {
        "rebalance_slash": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "pause_contract"
      ],
      "properties": {
        "pause_contract": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "unpause_contract"
      ],
      "properties": {
        "unpause_contract": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "vote_on_chain"
      ],
      "properties": {
        "vote_on_chain": {
          "type": "object",
          "required": [
            "proposal",
            "vote"
          ],
          "properties": {
            "proposal": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "vote": {
              "$ref": "#/definitions/VoteOption"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_validator"
      ],
      "properties": {
        "remove_validator": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "redelegate": {
              "type": [
                "boolean",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_validator"
      ],
      "properties": {
        "add_validator": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "redelegate"
      ],
      "properties": {
        "redelegate": {
          "type": "object",
          "required": [
            "from",
            "to"
          ],
          "properties": {
            "from": {
              "type": "string"
            },
            "to": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "change_owner"
      ],
      "properties": {
        "change_owner": {
          "type": "object",
          "required": [
            "new_owner"
          ],
          "properties": {
            "new_owner": {
              "$ref": "#/definitions/Addr"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "recover_token"
      ],
      "properties": {
        "recover_token": {
          "type": "object",
          "required": [
            "amount",
            "token"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "token": {
              "$ref": "#/definitions/Addr"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "recover_juno"
      ],
      "properties": {
        "recover_juno": {
          "type": "object",
          "required": [
            "amount",
            "denom",
            "to"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            },
            "to": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "kill_switch_unbond"
      ],
      "properties": {
        "kill_switch_unbond": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "kill_switch_open_withdraws"
      ],
      "properties": {
        "kill_switch_open_withdraws": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "change_unbonding_time"
      ],
      "properties": {
        "change_unbonding_time": {
          "type": "object",
          "required": [
            "new_time"
          ],
          "properties": {
            "new_time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "change_dev_fee"
      ],
      "properties": {
        "change_dev_fee": {
          "type": "object",
          "properties": {
            "dev_address": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "dev_fee": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "change_peg_recovery_fee"
      ],
      "properties": {
        "change_peg_recovery_fee": {
          "type": "object",
          "required": [
            "peg_recovery_fee"
          ],
          "properties": {
            "peg_recovery_fee": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "change_threshold"
      ],
      "properties": {
        "change_threshold": {
          "type": "object",
          "required": [
            "er_threshold"
          ],
          "properties": {
            "er_threshold": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "claim_airdrop1"
      ],
      "properties": {
        "claim_airdrop1": {
          "type": "object",
          "required": [
            "address",
            "amount",
            "proof",
            "stage"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "proof": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "stage": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "claim_airdrop2"
      ],
      "properties": {
        "claim_airdrop2": {
          "type": "object",
          "required": [
            "address",
            "amount",
            "proof"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "proof": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "claim_airdrop3"
      ],
      "properties": {
        "claim_airdrop3": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "claim_reward"
      ],
      "properties": {
        "claim_reward": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "change_referral_contract"
      ],
      "properties": {
        "change_referral_contract": {
          "type": "object",
          "required": [
            "referral_contract"
          ],
          "properties": {
            "referral_contract": {
              "$ref": "#/definitions/Addr"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_old_window_data"
      ],
      "properties": {
        "remove_old_window_data": {
          "type": "object",
          "required": [
            "window"
          ],
          "properties": {
            "window": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_old_claim_data"
      ],
      "properties": {
        "remove_old_claim_data": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_old_queue_data"
      ],
      "properties": {
        "remove_old_queue_data": {
          "type": "object"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "VoteOption": {
      "type": "string",
      "enum": [
        "yes",
        "no",
        "abstain",
        "no_with_veto"
      ]
    }
  }
}
